name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual CD run'

permissions:
  contents: write
  actions: read

# Ensure only one deployment runs at a time
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # === Docker settings ===
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      # === Kubernetes ===
      K8S_NAMESPACE: mono-repo-skeleton
      K8S_CA_DATA: ${{ secrets.K8S_CA_DATA }}
      K8S_CLIENT_CERT: ${{ secrets.K8S_CLIENT_CERT }}
      K8S_CLIENT_KEY: ${{ secrets.K8S_CLIENT_KEY }}
      K8S_SERVER: ${{ secrets.K8S_SERVER }}

      # === GitHub context ===
      REPO_NAME: ${{ github.event.repository.name }}
      BRANCH_NAME: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci


      # Python and UV setup for backend projects
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - uses: astral-sh/setup-uv@v3

      # Set up base and head refs for nx affected
      - name: Set base and head SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Run nx release to generate version and tag
        run: |
          # Configure git for nx release
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Create initial semantic version tag if none exists
          SEMANTIC_TAGS=$(git tag -l | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | head -1)
          if [ -z "$SEMANTIC_TAGS" ]; then
            echo "No semantic version tags found, creating initial v0.1.0 tag"
            git tag v0.1.0
            git push origin v0.1.0
            VERSION="v0.1.0"
          else
            echo "Existing semantic version tags found: $SEMANTIC_TAGS"
            echo "Using nx release for next version"
            npx nx release version
            # Get the newly created version tag
            git fetch --tags
            VERSION=$(git tag -l | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -1)
            echo "Latest version after nx release: $VERSION"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Generated version: $VERSION"

      - name: Identify affected projects
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "NX_BASE: ${{ env.NX_BASE }}"
          echo "NX_HEAD: ${{ env.NX_HEAD }}"
          echo "VERSION: ${{ env.VERSION }}"
          echo "Affected projects:"
          npx nx show projects --affected --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

      - name: Build and lint affected projects
        run: npx nx affected -t lint build --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

      - name: Login to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Publish affected projects
        run: |
          npx nx affected -t publish --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

      - name: Get last version for retagging
        run: |
          # Get the previous successful version (could be from git tags or a registry)
          LAST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
          echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_ENV
          echo "Last version for retagging: $LAST_VERSION"

      - name: Retag non-affected projects with unified version
        run: |
          # Get projects that are NOT affected but have retag target
          NON_AFFECTED_PROJECTS=$(npx nx show projects --with-target=retag | grep -v -F "$(npx nx show projects --affected --with-target=retag --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }})" || true)

          echo "Non-affected projects to retag: $NON_AFFECTED_PROJECTS"

          # Run retag target for non-affected projects
          if [ ! -z "$NON_AFFECTED_PROJECTS" ]; then
            for project in $NON_AFFECTED_PROJECTS; do
              echo "Retagging $project..."
              # Check if latest image exists before retagging (skip new projects without images)
              LATEST_IMAGE="$DOCKER_USERNAME/${REPO_NAME}_${project}:latest"
              if docker manifest inspect "$LATEST_IMAGE" > /dev/null 2>&1; then
                npx nx run $project:retag
              else
                echo "⚠️  Skipping retag for $project: no existing image found (new project?)"
              fi
            done
          else
            echo "No projects to retag"
          fi

      # Add annotation to the git tag with release notes
      - name: Add release notes to git tag
        run: |
          # Get affected projects
          AFFECTED_PROJECTS=$(npx nx show projects --affected --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} | sed 's/^/  - /')

          # Get commit messages since last version
          LAST_VERSION=$(git describe --tags --abbrev=0 ${{ env.VERSION }}^ 2>/dev/null || echo "")
          if [ -n "$LAST_VERSION" ]; then
            CHANGES=$(git log --pretty=format:"  - %s" $LAST_VERSION..${{ env.VERSION }} | head -10)
          else
            CHANGES=$(git log --pretty=format:"  - %s" -5)
          fi

          # Create annotated tag message
          TAG_MESSAGE="Release ${{ env.VERSION }}

          📦 Affected Projects:
          ${AFFECTED_PROJECTS:-  - all}

          📝 Changes:
          $CHANGES

          🚀 Deployed by GitHub Actions"

          # Delete the lightweight tag and create annotated tag
          git tag -d ${{ env.VERSION }}
          git tag -a ${{ env.VERSION }} -m "$TAG_MESSAGE"
          git push origin ${{ env.VERSION }} --force

          echo "✅ Git tag ${{ env.VERSION }} updated with release notes"

      # Setup kubectl for deployment
      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl for Kubernetes cluster
        run: |
          mkdir -p ~/.kube

          # Debug: Check if secrets are properly set
          echo "Checking secret lengths..."
          echo "CA_DATA length: ${#K8S_CA_DATA}"
          echo "CLIENT_CERT length: ${#K8S_CLIENT_CERT}"
          echo "CLIENT_KEY length: ${#K8S_CLIENT_KEY}"

          # Validate all K8s credentials are valid base64
          echo "Validating K8s credentials..."
          INVALID=""
          echo "$K8S_CA_DATA" | base64 -d > /dev/null 2>&1 || INVALID="${INVALID}K8S_CA_DATA "
          echo "$K8S_CLIENT_CERT" | base64 -d > /dev/null 2>&1 || INVALID="${INVALID}K8S_CLIENT_CERT "
          echo "$K8S_CLIENT_KEY" | base64 -d > /dev/null 2>&1 || INVALID="${INVALID}K8S_CLIENT_KEY "
          if [ -n "$INVALID" ]; then
            echo "ERROR: Invalid base64 format: $INVALID"
            exit 1
          fi
          echo "All K8s credentials are valid"

          # Create kubeconfig from template
          envsubst < .github/templates/kubeconfig.yaml > ~/.kube/config

          kubectl config current-context

          # Create namespace
          envsubst < .github/templates/namespace.yaml | kubectl apply -f -

      # Deploy affected projects to Kubernetes
      - name: Deploy affected projects to Kubernetes
        run: |
          npx nx affected -t deploy --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}