name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual CD run'

permissions:
  contents: write
  actions: read

# Ensure only one deployment runs at a time
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      REPO_NAME: ${{ github.event.repository.name }}
      BRANCH_NAME: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Python and UV setup for backend projects
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - uses: astral-sh/setup-uv@v3

      # Set up base and head refs for nx affected
      - name: Set base and head SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Generate unified version
        run: |
          VERSION="v$(date +%Y.%m.%d)-${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Generated version: $VERSION"

      - name: Identify affected projects
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "NX_BASE: ${{ env.NX_BASE }}"
          echo "NX_HEAD: ${{ env.NX_HEAD }}"
          echo "VERSION: ${{ env.VERSION }}"
          echo "Affected projects:"
          npx nx show projects --affected --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

      - name: Build and lint affected projects
        run: npx nx affected -t lint build --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

      - name: Login to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Publish affected projects
        run: |
          npx nx affected -t publish --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

      - name: Get last version for retagging
        run: |
          # Get the previous successful version (could be from git tags or a registry)
          LAST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
          echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_ENV
          echo "Last version for retagging: $LAST_VERSION"

      - name: Retag non-affected projects with unified version
        run: |
          # Get projects that are NOT affected but have retag target
          NON_AFFECTED_PROJECTS=$(npx nx show projects --with-target=retag | grep -v -F "$(npx nx show projects --affected --with-target=retag --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }})" || true)

          echo "Non-affected projects to retag: $NON_AFFECTED_PROJECTS"

          # Run retag target for non-affected projects
          if [ ! -z "$NON_AFFECTED_PROJECTS" ]; then
            for project in $NON_AFFECTED_PROJECTS; do
              echo "Retagging $project..."
              npx nx run $project:retag
            done
          else
            echo "No projects to retag"
          fi

      # Create git tag to sync with Docker image versions
      - name: Create and push version tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          echo "Creating git tag: ${{ env.VERSION }}"
          git tag -a "${{ env.VERSION }}" -m "Release ${{ env.VERSION }} - Automated deployment"
          git push origin "${{ env.VERSION }}"

          echo "âœ… Git tag ${{ env.VERSION }} created and pushed"